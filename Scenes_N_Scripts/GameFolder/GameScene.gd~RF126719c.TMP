extends Node

var fuelLevel = 500
var fuelLevelMax = 1000


var corePowerLevel = 200
var corePowerLevelMax = 1000
var coreSlowDownRate = 20
var playerDied = false
var playerBase = load("res://Scenes_N_Scripts/PlayerStuff/Player.tscn") # Load Player Scene

var directionRainbownado = Vector2(90,0)

func _ready():
	#$Player.GameScenePointer = self
	$Player.free()
	var newPlayer = playerBase.instance()
	self.add_child(newPlayer,true)
	newPlayer.GameScenePointer = self
	pass




func _process(delta):
	$RainbowNado.move_and_slide(directionRainbownado)
	if(fuelLevel>fuelLevelMax):
		fuelLevel=fuelLevelMax
	updateGlobalPlayerData(delta)
	if(fuelLevel<150 && !$SoundBox.playLowFuel):
		$SoundBox.startLowFuel()
	if(fuelLevel>150 && $SoundBox.playLowFuel):
		$SoundBox.stopLowFuel()
		
func updateGlobalPlayerData(delta):
	if(corePowerLevel>0):
		corePowerLevel -= delta * coreSlowDownRate
		fuelLevel -= corePowerLevel * 0.1 * delta
	if(corePowerLevel>200):
		corePowerLevel -= delta * coreSlowDownRate * 3
		fuelLevel -= corePowerLevel * 0.2 * delta
	$Player.updateCoreRotation(corePowerLevel)
	$Player.updateFuelLevel(fuelLevel)
	#decrease fuel and power * delta
	#send updated values to Player
	pass

func process_collision(projectile):
	if (projectile.projectileType == 1):
		fuelLevel +=600
		projectile.get_parent().useUp()
		print("FUEL")
	if (projectile.projectileType == 2):
		projectile.get_parent().explode()
		
		
		$Player/PlayerShip.linear_velocity.x +=($Player/PlayerShip.global_position.x - projectile.global_position.x) *20
		$Player/PlayerShip.linear_velocity.y +=($Player/PlayerShip.global_position.y - projectile.global_position.y) *20
		print("BOOM")
	if (projectile.projectileType == 3):
		#projectile.get_parent()
		print("LOOP")
	projectile.unLive()
	

func killPlayer():
	if(!playerDied):
		print("PLAYER KILLED")
		playerDied = true
		$Player.deathEvent(10)
	pass

func _on_DeathTimer_timeout():
	if(playerDied):
		get_tree().change_scene("res://Scenes_N_Scripts/GameFolder/DeathScreen.tscn")

